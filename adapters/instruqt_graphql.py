import httpx, asyncio, time
import time, asyncio

from core.config import settings

# ------------ GraphQL snippets -----------------
_LIST_TRACKS = """query($teamSlug:String!) {
  tracks(teamSlug:$teamSlug) {
    id slug title description
  }
}
"""

_CREATE_INVITE = """mutation($invite: TrackInviteInput!){
  createTrackInvite(invite:$invite){
    id
  }
}
"""

# ------------ Helpers ---------------------------
async def _graphql(query: str, variables: dict) -> dict:
    headers = {"Authorization": f"Bearer {settings.instruqt_api_token}"}
    async with httpx.AsyncClient(timeout=20) as c:
        resp = await c.post(settings.instruqt_api_url, json={"query": query, "variables": variables}, headers=headers)
    resp.raise_for_status()
    data = resp.json()
    if "errors" in data:
        raise RuntimeError(data["errors"][0])
    return data["data"]

# cache track list for 5 min

_TRACK_CACHE: dict[str, tuple[float, list[dict]]] = {}
TTL = 300   # seconds

async def list_tracks() -> list[dict]:
    now = time.time()
    if (entry := _TRACK_CACHE.get("tracks")) and now - entry[0] < TTL:
        return entry[1]                           # fresh cache hit

    data = await _graphql(_LIST_TRACKS, {"teamSlug": settings.instruqt_team_slug})
    tracks = data["tracks"]
    _TRACK_CACHE["tracks"] = (now, tracks)        # update cache
    return tracks


MAX_DESC = 380

async def create_invite(slug: str) -> str:
    tracks = await list_tracks()
    track = next((t for t in tracks if t["slug"] == slug), None)
    if not track:
        raise RuntimeError(f"Track '{slug}' not found")

    raw_desc = (track.get("description") or "").replace("\n", " ")
    public_desc = (raw_desc[:MAX_DESC-3] + "â€¦") if len(raw_desc) > MAX_DESC else raw_desc
    if not public_desc:
        public_desc = "Invite generated by lab router"

    invite_obj = {
        "trackIDs": [track["id"]],
        "publicTitle": track["title"] or slug,
        "publicDescription": public_desc,
    }

    data = await _graphql(_CREATE_INVITE, {"invite": invite_obj})
    invite_id = data["createTrackInvite"]["id"]
    return f"https://play.instruqt.com/{settings.instruqt_team_slug}/invite/{invite_id}"
